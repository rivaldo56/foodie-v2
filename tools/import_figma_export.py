#!/usr/bin/env python3
"""
Usage:
  python tools/import_figma_export.py /path/to/figma-export /path/to/foodie-frontend

What it does:
- parses meta.json and builds src/assets.js mapping { "Frame Name": "/images/filename.png" }
- copies all files from figma-export/images -> foodie-frontend/public/images
- writes src/assets.js in the frontend project
"""
import sys
import os
import json
import shutil

def main():
    if len(sys.argv) < 2:
        print("Usage: python import_figma_export.py /path/to/figma-export [frontend-path]")
        sys.exit(1)

    figma_dir = os.path.abspath(sys.argv[1])
    frontend_dir = os.path.abspath(sys.argv[2]) if len(sys.argv) > 2 else os.path.abspath("./foodie-frontend")

    images_dir = os.path.join(figma_dir, "images")
    meta_file = os.path.join(figma_dir, "meta.json")

    if not os.path.exists(images_dir):
        print("ERROR: images/ not found in", figma_dir)
        sys.exit(1)
    if not os.path.exists(meta_file):
        print("WARNING: meta.json not found — will only copy images")
        meta = {}
    else:
        meta = json.load(open(meta_file, "r", encoding="utf-8"))

    # ensure frontend public/images exists
    public_images = os.path.join(frontend_dir, "public", "images")
    os.makedirs(public_images, exist_ok=True)

    # copy images
    for fname in os.listdir(images_dir):
        src = os.path.join(images_dir, fname)
        dst = os.path.join(public_images, fname)
        shutil.copyfile(src, dst)
        print("copied", fname, "->", os.path.relpath(dst))

    # build mapping from meta.json
    mapping = {}
    # meta.json might have various shapes; common: {"frames": {...}} or a list
    if isinstance(meta, dict):
        # try `frames` or `nodes` keys
        for key in ("frames", "nodes", "images", "assets"):
            if key in meta:
                container = meta[key]
                # container may be dict or list
                if isinstance(container, dict):
                    for k,v in container.items():
                        # try to find filename
                        filename = None
                        if isinstance(v, dict):
                            filename = v.get("fileName") or v.get("image") or v.get("export") or v.get("filename")
                        if not filename:
                            # fallback: try meta top-level mapping images -> file names
                            pass
                        if filename:
                            mapping[k] = "/images/" + os.path.basename(filename)
                elif isinstance(container, list):
                    for item in container:
                        name = item.get("name") or item.get("id")
                        fname = item.get("fileName") or item.get("image") or item.get("filename")
                        if name and fname:
                            mapping[name] = "/images/" + os.path.basename(fname)
                break
        # fallback: look for entries that directly map filenames
        if not mapping:
            # try top-level entries: meta might be {"<id>": "file.png", ...}
            for k,v in meta.items():
                if isinstance(v, str) and v.lower().endswith((".png",".jpg",".jpeg",".svg","webp")):
                    mapping[k] = "/images/" + os.path.basename(v)

    # if no mapping found, create mapping of filenames -> filenames
    if not mapping:
        print("No useful mapping found in meta.json — creating filename-based mapping.")
        for fname in os.listdir(images_dir):
            key = os.path.splitext(fname)[0]
            mapping[key] = "/images/" + fname

    # write src/assets.js
    assets_js_dir = os.path.join(frontend_dir, "src")
    os.makedirs(assets_js_dir, exist_ok=True)
    assets_js_path = os.path.join(assets_js_dir, "assets.js")
    with open(assets_js_path, "w", encoding="utf-8") as f:
        f.write("// Auto-generated by import_figma_export.py\n")
        f.write("const ASSETS = {\n")
        for k, v in mapping.items():
            safe_key = k.replace("'", "\\'")
            f.write(f"  '{safe_key}': '{v}',\n")
        f.write("};\n\nexport default ASSETS;\n")
    print("Wrote mapping to", assets_js_path)
    print("Done. You can import ASSETS from src/assets.js in your frontend.")

if __name__ == "__main__":
    main()
